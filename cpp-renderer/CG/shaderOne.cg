
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float3 normal: TEXCOORD0;
	float3 vxyz: TEXCOORD1;
	float3 color : COLOR;
};

struct PixelDataOutput {
	float3 color : COLOR;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj, uniform float sphereRadius,
  uniform float3 sphereCenter, uniform float morphFraction) {

  VertexDataOutput ret;
  float3 morphDirection = normalize(vdi.vertex.xyz-sphereCenter);
  float3 finalPosition = sphereCenter + morphDirection*sphereRadius;
  float4 morphedVertex;
  morphedVertex.xyz = vdi.vertex.xyz + (finalPosition-vdi.vertex.xyz)*morphFraction;
  morphedVertex.w = 1.0f;
//  ret.projv = mul(modelViewProj, vdi.vertex);
  ret.projv = mul(modelViewProj, morphedVertex);
  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}


PixelDataOutput FragmentMain(VertexDataOutput pdi, 
	uniform float3 eye, uniform float3 light,
	uniform float3 tlc, uniform float3 trc, uniform float3 blc) {



  PixelDataOutput ret;
  ret.color = pdi.color;
  return ret;

  float3 materialColor = float3(1.0f, 0.0f, 0.0f);
  float ka = 0.4f;
  float3 eyev = normalize(eye-pdi.vxyz);
  float3 normal = normalize(pdi.normal);
  float3 lightv = normalize(light-pdi.vxyz);
  float kd = dot(normal, lightv);
  kd = (kd < 0.0f) ? 0.0f : kd;
  float3 litColor = materialColor*(ka + (1-ka)*kd);
  ret.color.rgb = litColor;

//  ret.color.rgb = float3(1.0f, 1.0f, 0.0f);
//  ret.color.rgb = eye;

//  ret.color.rgb = (pdi.normal + float3(1.0f, 1.0f, 1.0f))/2.0f;

// float3 c0;
// c0 = float3(-60.8652, 0, -13.9045);
// float3 c1;
// c1 = float3(39.5258, 47.25, 48.5653);
// ret.color.rgb = float3(0.0f, 0.0f, 0.0f);
// ret.color.r = (pdi.vxyz.x-c0.x)/(c1.x-c0.x);
// ret.color.g = (pdi.vxyz.y-c0.y)/(c1.y-c0.y);
// ret.color.b = (pdi.vxyz.z-c0.z)/(c1.z-c0.z);


// pass top left, top right, and bottom left corners of the billboard to fragment shader (tlc, trc, blc) 
 
// compute reflected ray at current pixel (fragment) from pdi.xyz, pdi.normal, and eye

// intersect reflected ray with billboard plane

// if intersection, compute billboard texture coordinates

// lookup billboard texture at intersection texture coordinates

// if not background (i.e. transparent) set color
 
 return ret;

}